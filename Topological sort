Given an adjacency list for a Directed Acyclic Graph (DAG) where adj_list[i] contains a list of all vertices j such that 
there is a directed edge from vertex i to vertex j, with  V  vertices and E  edges, your task is to find any valid topological sorting of the graph

void bfs(int V, vector<int> adj[],  vector<int> &id, vector<int> &topo, queue<int> & q){
	    
	   while(!q.empty()){
	       int val = q.front();
	       q.pop();
	       topo.push_back(val);
	       for(auto u:adj[val]){
	           id[u]= id[u]-1;
	           if(id[u]==0 ){
	               q.push(u);
	           }
	       }
	   }
	   
	}
	
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    vector<int> id(V,0);
	    vector<int> topo;
	    queue<int> q;
	    for(int i =0;i<V;i++){
	        for(auto u : adj[i]){
	            id[u] +=1;
	        }
	    }
	    for(int i =0 ; i<V;i++){
	       if(id[i]==0){
	           q.push(i);
	          
	       }
	   }
	     
	    bfs(V,adj,id,topo,q);
	    
	    return topo;
	    
	}
